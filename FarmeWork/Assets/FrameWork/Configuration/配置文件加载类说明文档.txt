加载部分：
	ConfigurationManager  是对外接口，提供了加载配置文件，提取数据的方法
	ConfigDataLiat 是配置文件对应的数据集合,配置文件的一行数据对应一个集成自IConfig的类
	ReadConfigerBase 是文件读取器,提供Read接口,可供Json与Xml各自的读取器重写
	IConfig 是数据类的接口，所有的数据类都要继承这个接口

	加载:
		示例:
			ConfigVar.ShipConfigList = ConfigurationManager.ReadConfigFile<ShipConfig>(ResPathConfig.ConfigRes, "Ship");

	使用数据:
		ConfigDataLiat里面写了索引器,可以直接通过id取到对应的行数据实例化出来的对象
		示例：
			PersonLevelConfig personlevaldata = (PersonLevelConfig)ConfigVar.PersonLevelConfigList[35001];

	注释：
		使用之前把ConfigLoad.Load()方法给补全


	尚存问题:
		1、配置加载完之后需要立马卸载,还没想好怎么卸载数据
		2、索引器读取数据最好不要在内部就给强转了,别每次调用都还得写上强转的,但是这样貌似需要让ConfigDataLiat类也加上泛型


检测部分：
	三部分：加载表,检测表,配置
	加载表:
		LoadTable 是加载表的基类
		LoadTable_LitJson 是加载Json文件的类
		要是加载其他的,重写LoadTable的Load方法
	检测表:
		CheckLogicBase 是检测表的基类
		CheckReferenced 是检测表的关联引用类
		CheckPrefabs 是检测预制体
		要是检测其他的,重写CheckLogicBase的Check方法
	配置：
		CheckConfig.json 检测配表逻辑的配表
			CheckLogic 检测逻辑,和类名一样,会反射出对应类,然后检测
			ConfigName 要检测的配表
			KeyName 该表的唯一标识字典名(用来输出)
			AttriName 要检测的属性名
			IgronNum 忽略值
			ReferencedConfigName 关联的表
			ReferencedConfigIdAttribuName 关联的表的字段名称
			PrefabsPath 加载的预制体的路径
		CheckConfigDefine 一些路径与使用加载逻辑的定义

	ConfigCheckUtil 是检测类