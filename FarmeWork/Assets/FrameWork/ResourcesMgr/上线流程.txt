上线检查:
	检测热更功能,检查强制热更功能,检测安装包覆盖功能,检查强更功能

热更流程：
	1、发公告
	2、比公告提前半小时开始热更,关闭热更功能
	3、热更完毕使用强制热更功能热更
	4、然后统计谁热更了哪些功能至看板,交由测试验收
	5、验收完成打开热更功能

上线问题解决之后的上传分支判断:
	这次版本就要上传到线上的,就上传到release分支(资源与Lua代码可以直接热更到线上,C#代码就得重新出包,让玩家下载新包)
	等下次正常迭代版本才到线上的,就上传到master分支

分支：
	就两个:release与online分支
	release分支:
		封包时开此分支,记录上线内容,master就可以继续开发新功能
		上线之前:
			测出的一些bug,就得release与master一起上传
		上线之后:
			上线之后遇到的问题中,需要在下次出包迭代版本之前更新到线上的,就上传至此分支
			(如果是各种资源与Lua代码直接热更,如果是改的C#代码则重新出包)

	online分支:
		上线分支,上线包从此分支打出,记录每次上线版本的内容,方便随时回退查看
		热更时,online分支会开一个对应版本分支,然后拉取release分支内容,再去热更

	分支流程:
		封包之后:
			开release分支,测试出来的bug需要同时更新到release与master上
		出上线包时:
			拉取release分支的内容,到一个新的online分支上,从新的online分支上出上线包(此时,新的online分支就保存了此次上线版本的内容)
		上线之后(热更或者出包更新):
			参考出上线包流程
			同时把新的online分支资源上传做热更
		线上版本稳定之后:
			合并release到master分支,同时把xlua的热修复代码改成c#代码
		迭代小版本:
			参考出上线包流程
		迭代大版本(强更):
			参考出上线包流程


=================下面是技术看的================================

上传热更资源操作:
	1、合并release至online分支
	2、在online分支上打包并且更新ab到云服务器
	(在Jenkins上一键操作)

开关热更操作:
	1、在Oss服务器的chengzi-starship库里找OnLine/ServerConfig.txt文件
		修改 HotUpdate, 后面的值 1是打开 0是关闭
	2、修改完毕保存,同时在阿里云后台刷新下CDN缓存
	(在Jenkins上一键操作)	

强制热更操作:
	创建个名称为ForceHotUpdate的文件,放在沙盒路径下即可
	它会跳过检测热更开关,强制检测版本

强更操作:
	1、在Oss服务器的chengzi-starship库里找OnLine/ServerConfig.txt文件
	2、修改能运行的最低版本
	3、刷新cdn缓存

注意：
	版本稳定之后需要把Lua代码换回C#代码

=================技术看================================