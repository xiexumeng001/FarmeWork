编码原理知识

1、进制转换
	10进制 ---> 2进制 
		原理:
			第几位就是有几个2相乘,最后加到一起,和10进制一样的
    		区别只是 逢2进1,逢10进1
		操作:
    		整数部分:除2取余，逆序排列  小数部分:乘2取整，顺序排列
 	10进制 ---> 16进制(0-9与a-f表示)
    	与转2进制一样的逻辑
 	16进制 ----> 2进制
    	每一位单独转为4位二进制,取4合1
	C# 常量表示:二进制:0b.. 16进制:0x...


2、源码,反码,补码：
  	源码就是正常2进制,
  	负数的反码是对源码逐位取反,符号位除外,补码是对反码加1
  	正数的反码与补码就是源码


3、位运算符
	<<(左移)
		丢弃最高位,0补最低位
		<<仅针对于int,uint,long,ulong,如果是byte等类型,那么扩大为int
		意义:在没有位数溢出的情况下,每移动一位,就是乘2
	>>(右移)
		符号位不变,左边补上符号位
		意义:右移一位相当于除2
	      -6>>2结果是-2,6>>2是1,所以是按最小值取整？
	>>>(无符号右移运算符)
		忽略了符号位扩展,0补最高位
	&、|
	~(按位取反)
	^(异或,不同为1,相同为0)


4、int在计算机中的存储
	一个Int是4个字节,是32Bit,最左边是最高位代表符号,不足补0,补高位的0
	计算机中存储的都是补码
	取值范围:-1*2^31----1*2^31-1,负数多了一位是因为-0换算成其他数了

5、byte在计算中的存储
	一个byte是8bit,C#中,byte无符号位,范围0-255(0-2^8-1)

6、int 转 byte
  	int 转换为 byte 留低8位
  	int 转换为 byte数组,每8为合成1位字节,下标0->3就是低位到高位
    	方法:右移24位, 与上0xff,强转为byte,就是最高位的byte,下标为3
      	问题:与上0xff 与 强转为byte有什么区别呢???
		byte转为int
	    	C#中,byte是没有符号位的
	       		由byte转为int时,按0扩展,10进制 与 二进制的数值都没问题
	    	java中,byte是有符号位的
	       		由byte转为int时,是按符号位扩展,这样可以保证10进制数值一致,但是对于负数来说二进制数值是有问题的
	       		所以需要0xff,可以按0扩展,能保证二进数数值没问题